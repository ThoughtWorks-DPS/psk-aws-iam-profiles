---
version: 2.1

orbs:
  #checkov:skip=CKV_CIRCLECIPIPELINES_3
  terraform: twdps/terraform@0.8.0
  op: twdps/onepassword@1.0.0
  do: twdps/pipeline-events@1.0.0

# ============================================================ pipeline globals

globals:
  - &context empc-lab
  - &executor-image twdps/circleci-infra-aws:alpine-4.11.0

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

# ============================================================ commands and jobs

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      account:
        description: account to be configured
        type: string
    steps:
      - op/env:
          env-file: op.<< parameters.account >>.env
      - run:
          name: set ~/.terraformrc
          command: op inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.account >> environment variables
          command: op inject -i environments/<< parameters.account >>.auto.tfvars.json.tpl -o << parameters.account >>.auto.tfvars.json

  aws-integration-tests:
    parameters:
      account:
        description: for EMPC Labs this is either nonprod or prod
        type: string
    steps:
      - run:
          name: InSpec tests of managed AWS resources
          command: bash scripts/run_inspec_integration_tests.sh << parameters.account >>

  rotate-service-account-credentials:
    parameters:
      account:
        description: for EMPC Labs this is either nonprod or prod
        type: string
    steps:
      - run:
          name: create or rotate the service account credentials
          command: bash scripts/rotate_svc_acct_credentials.sh << parameters.account >>

jobs:

  recurring-integration-tests:
    description: |
      Recurring job (nightly) to run pipeline integration tests and attempt to detect aws configuration drift
    docker:
      - image: *executor-image
    environment:
      TF_WORKSPACE: << parameters.account >>
    shell: op run --env-file op.<< parameters.account >>.env -- /bin/sh -eo pipefail
    parameters:
      account:
        description: nonprod or production account configuration
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          account: << parameters.account >>
      - aws-integration-tests:
          account: << parameters.account >>

# ============================================================ workflows

workflows:
  version: 2

  deploy psk profiles and roles to nonprod:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - terraform/plan:
          name: nonprod change plan
          context: *context
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          workspace: nonprod
          before-terraform:
            - set-environment:
                account: nonprod
          filters: *on-push-main

      - approve nonprod changes:
          type: approval
          requires:
            - nonprod change plan
          filters: *on-push-main

      - terraform/apply:
          name: apply nonprod changes
          context: *context
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          workspace: nonprod
          before-terraform:
            - set-environment:
                account: nonprod
          after-terraform:
            - aws-integration-tests:
                account: nonprod
            - rotate-service-account-credentials:
                account: nonprod
            - do/slack-webhook:
                message: psk-aws-iam-profile nonprod deployment
                webhook-url: $LAB_EVENTS_CHANNEL_WEBHOOK
          requires:
            - approve nonprod changes
          filters: *on-push-main

  deploy roles to prod:
    jobs:
      - terraform/plan:
          name: prod change plan
          context: *context
          shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
          workspace: prod
          before-terraform:
            - set-environment:
                account: prod
          filters: *on-tag-main

      - approve prod changes:
          type: approval
          requires:
            - prod change plan
          filters: *on-tag-main

      - terraform/apply:
          name: apply prod changes
          context: *context
          shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
          workspace: prod
          before-terraform:
            - set-environment:
                account: prod
          after-terraform:
            - aws-integration-tests:
                account: prod
            - do/slack-webhook:
                message: psk-aws-iam-profile prod release
                webhook-url: $LAB_EVENTS_CHANNEL_WEBHOOK
            - do/release-notes:
                on-tag: true
          requires:
            - approve prod changes
          filters: *on-tag-main

  schedule nightly integration test:
    jobs:
      - do/schedule-pipeline:
          name: nightly integration test
          context: *context
          shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
          scheduled-pipeline-name: nightly-integration-test
          scheduled-pipeline-description: |
            Nightly, automated run of iam-profiles integration tests.
          hours-of-day: "[1]"
          days-of-week: "[\"SUN\", \"MON\",\"TUE\",\"WED\",\"THU\"]"
          filters: *on-tag-main

  nightly integration test:
    when:
      equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - recurring-integration-tests:
          context: *context
          account: nonprod
      - recurring-integration-tests:
          context: *context
          account: prod
